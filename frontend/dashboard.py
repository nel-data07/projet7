import streamlit as st
import requests
import pandas as pd

# Effacer le cache au d√©marrage
st.cache_data.clear()
st.cache_resource.clear()

# Configuration des pages du dashboard
st.set_page_config(
    page_title="Simulation de Risque de Cr√©dit",
    page_icon="üí≥",
    layout="wide"
)

# Style CSS pour am√©liorer l'apparence
st.markdown(
    """
    <style>
    .main {
        background-color: #f8f9fa;
    }
    .block-container {
        padding: 2rem;
    }
    .stButton > button {
        background-color: #007bff;
        color: white;
        border-radius: 5px;
        padding: 0.5rem 1rem;
    }
    .stButton > button:hover {
        background-color: #0056b3;
    }
    h1, h2, h3 {
        color: #343a40;
    }
    .description {
        color: #6c757d;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Description introductive
st.title("Bienvenue dans l'outil de simulation de risque de cr√©dit")
st.write(
    """
    <p class="description">
    Cet outil permet d'estimer la probabilit√© de non-remboursement d'un cr√©dit en fonction des informations du client.
    </p>
    <h3>Fonctionnalit√©s :</h3>
    <ul>
        <li>Clients existants : S√©lectionnez un ID client pour visualiser les pr√©dictions associ√©es.</li>
        <li>Nouveaux clients : Remplissez les informations n√©cessaires pour simuler une nouvelle demande de cr√©dit.</li>
    </ul>
    <h3>D√©finitions :</h3>
    <ul>
        <li><b>Montant de l'annuit√©</b> : Montant annuel rembours√© (capital + int√©r√™ts).</li>
        <li><b>Prix des biens</b> : Montant total des biens financ√©s avec le cr√©dit.</li>
    </ul>
    """,
    unsafe_allow_html=True,
)

# Menu de navigation
menu = st.sidebar.selectbox(
    "Menu", ["Pr√©dictions Client Existant", "Cr√©er Nouveau Client"]
)

if menu == "Pr√©dictions Client Existant":
    st.subheader("Simulation de Risque de Cr√©dit - Client Existant")
    st.write("### S√©lectionnez un client existant pour pr√©dire le risque.")

    try:
        # Charger les IDs clients depuis l'API
        response = requests.get("https://projet7-1.onrender.com/get_client_ids")
        if response.status_code == 200:
            client_ids = response.json().get("client_ids", [])
        else:
            st.error(f"Erreur lors de la r√©cup√©ration des IDs clients : {response.status_code}")
            client_ids = []
    except Exception as e:
        st.error(f"Erreur : {e}")
        client_ids = []

    # Interface pour s√©lectionner un ID client
    if client_ids:
        selected_id = st.selectbox("Choisissez un ID client (SK_ID_CURR)", client_ids)
        if st.button("Pr√©dire"):
            try:
                response = requests.post(
                    "https://projet7-1.onrender.com/predict_client",
                    json={"SK_ID_CURR": selected_id},
                )
                if response.status_code == 200:
                    data = response.json()
                    prediction = data.get("prediction")
                    shap_values = data.get("shap_values")
                    feature_names = data.get("feature_names")

                    if prediction > 0.5:
                        st.error(f"Cr√©dit REFUS√â (Risque √©lev√© - {prediction:.2f})")
                    else:
                        st.success(f"Cr√©dit ACCEPT√â (Risque faible - {prediction:.2f})")

                    # Affichage des valeurs SHAP
                    if shap_values and feature_names:
                        st.subheader("Facteurs influen√ßant la d√©cision du mod√®le")
                        shap_df = pd.DataFrame({"Feature": feature_names, "SHAP Value": shap_values})
                        st.bar_chart(shap_df.set_index("Feature"))
                else:
                    st.error(f"Erreur API : {response.status_code}")
                    st.write(response.text)
            except Exception as e:
                st.error(f"Erreur : {e}")
    else:
        st.warning("Aucun ID client disponible.")

elif menu == "Cr√©er Nouveau Client":
    st.subheader("Simulation de Risque de Cr√©dit - Nouveau Client")
    st.write("### Remplissez les informations suivantes pour pr√©dire le risque.")

    # Formulaire d'entr√©e des donn√©es
    CODE_GENDER = st.selectbox("Genre (0 = Femme, 1 = Homme)", [0, 1])
    FLAG_OWN_CAR = st.selectbox("Poss√®de une voiture (0 = Non, 1 = Oui)", [0, 1])
    CNT_CHILDREN = st.slider("Nombre d'enfants", 0, 10, 0)
    AMT_INCOME_TOTAL = st.number_input("Revenu total annuel (‚Ç¨)", min_value=0, value=0)
    AMT_CREDIT = st.number_input("Montant du cr√©dit demand√© (‚Ç¨)", min_value=0, value=0)
    AMT_ANNUITY = st.number_input("Montant de l'annuit√© (‚Ç¨)", min_value=0, value=0)
    AMT_GOODS_PRICE = st.number_input("Prix des biens (‚Ç¨)", min_value=0, value=0)

    # Pr√©parer les donn√©es pour l'API
    data = {
        "CODE_GENDER": CODE_GENDER,
        "FLAG_OWN_CAR": FLAG_OWN_CAR,
        "CNT_CHILDREN": CNT_CHILDREN,
        "AMT_INCOME_TOTAL": AMT_INCOME_TOTAL,
        "AMT_CREDIT": AMT_CREDIT,
        "AMT_ANNUITY": AMT_ANNUITY,
        "AMT_GOODS_PRICE": AMT_GOODS_PRICE,
    }

    if st.button("Valider"):
        try:
            response = requests.post(
                "https://projet7-1.onrender.com/predict_client", json=data
            )
            if response.status_code == 200:
                data = response.json()
                prediction = data.get("prediction")
                shap_values = data.get("shap_values")
                feature_names = data.get("feature_names")

                if prediction > 0.5:
                    st.error(f"Cr√©dit REFUS√â (Risque √©lev√© - {prediction:.2f})")
                else:
                    st.success(f"Cr√©dit ACCEPT√â (Risque faible - {prediction:.2f})")

                if shap_values and feature_names:
                    st.subheader("Facteurs influen√ßant la d√©cision du mod√®le")
                    shap_df = pd.DataFrame({"Feature": feature_names, "SHAP Value": shap_values})
                    st.bar_chart(shap_df.set_index("Feature"))
            else:
                st.error(f"Erreur API : {response.status_code}")
                st.write(response.text)
        except Exception as e:
            st.error(f"Erreur : {e}")
